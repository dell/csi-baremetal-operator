name: PR validation

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
env:
  go_version: '1.16.0'
  golangci_version: '1.37.0'
jobs:
  lint-test:
    name: Validate code and build it
    runs-on: ubuntu-18.04
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Prepare Golang 
      uses: actions/setup-go@v2
      with:
        go-version: ${{env.go_version}}

    - name: Load dep cache
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: go-dep-${{ env.go_version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: go-dep-${{ env.go_version }}-
          
    - name: Load build and linter cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/go-build
          ~/.cache/golangci-lint
        key: go-build-${{ env.go_version }}-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/pkg') }}
        restore-keys: |
          go-build-${{ env.go_version }}-${{ hashFiles('**/go.sum') }}
          go-build-${{ env.go_version }}-
        
    - name: Get dependencies
      run:  go mod download
      
    - name: Install golangci-lint
      run: |
        wget -q -O golangci-lint.deb https://github.com/golangci/golangci-lint/releases/download/v${{ env.golangci_version }}/golangci-lint-${{ env.golangci_version }}-linux-amd64.deb
        sudo dpkg -i golangci-lint.deb
        
    - name: Lint code
      run: GOGC=300 make lint-code

    - name: Lint chart
      run: make lint-operator-chart

    - name: Build binary
      run: |
        make manager

    - name: Run tests
      run: |
        make test

    - name: Coverage
      run: make coverage

    - name: Upload coverage report to artifacts
      uses: actions/upload-artifact@v2.2.1
      with:
        name: coverage.html
        path: ./coverage.html

    - name: Upload coverage report to codecov
      uses: codecov/codecov-action@v1.0.2
      continue-on-error: true  #added here to workaround PR's from forked repositories validation failure caused by CODECOV_TOKEN access
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.out
        flags: unittests
